// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Frequency {
  Weekly
  Monthly
  Yearly
}

enum TransactionType {
  DEBIT
  CREDIT
}

enum TransactionStatus {
  PENDING
  POSTED
  CANCELLED
}

model User {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  email     String   @unique
  password  String
  emailVerified Boolean @default(false)
  mfaEnabled Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bills          Bill[]
  budgetCategories BudgetCategory[]
  expenditures   Expenditure[]
  passwordResets PasswordReset[]
  accounts       Account[]
  transactions   Transaction[]

  @@map("users")
}

model Bill {
  id       String    @id @default(uuid())
  title    String
  amount   Float
  dayDue   Int
  frequency Frequency
  userId   String
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("bills")
}

model BudgetCategory {
  id       String @id @default(uuid())
  title    String
  limit    Float
  userId   String
  user     User @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  expenditures Expenditure[]

  @@map("budget_categories")
}

model Expenditure {
  id       String @id @default(uuid())
  title    String
  amount   Float
  categoryId String
  category BudgetCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  userId   String
  user     User @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("expenditures")
}

model PasswordReset {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("password_resets")
}

model Account {
  id            String   @id @default(uuid())
  plaidAccountId String  @unique
  name          String
  type          String   // checking, savings, credit, etc.
  subtype       String?  // checking, savings, credit_card, etc.
  institution   String
  institutionId String
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  transactions  Transaction[]

  @@map("accounts")
}

model Transaction {
  id                String           @id @default(uuid())
  plaidTransactionId String          @unique
  accountId         String
  account           Account          @relation(fields: [accountId], references: [id], onDelete: Cascade)
  userId            String
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount            Float
  type              TransactionType
  status            TransactionStatus
  date              DateTime
  name              String
  merchantName      String?
  category          String?
  subcategory       String?
  location          Json?            // Store location data as JSON
  paymentChannel    String?
  pending           Boolean          @default(false)
  isoCurrencyCode   String?
  unofficialCurrencyCode String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@map("transactions")
}
